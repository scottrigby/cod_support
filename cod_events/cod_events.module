<?php

define('DEFAULT_EVENT','default_event');
include_once('cod_events.features.inc');

/*
* Implements hook_ctools_plugin_directory -
* This lets ctools know to scan my module for a content_type plugin file
* Detailed docks in ctools/ctools.api.php
*/
function cod_events_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_forms().
 */
function cod_events_forms() {
  $forms = array();
  $days = cod_events_days();
  if ($days = cod_events_days()) {
    foreach ($days as $day_nid) {
      $forms['cod_events_timeslots_'. $day_nid . '_form']['callback'] = 'cod_events_timeslots_form';
    }
  }
  return $forms;
}

/**
 * Helper function determines days there are time slots for.
 */
function cod_events_days($event_id = NULL) {
  //if event id is null, we need to get all days in the system to build the forms
  static $days;
  if (empty($days)) {
    $days = array();
    if (db_table_exists('field_data_field_slot_datetime')) {
      $event_join = 'INNER JOIN {og_membership} om ON n.nid = om.etid';
      $event = 'om.gid = :event_id AND';

      $sql = "SELECT n.nid AS nid, DATE_FORMAT(s.field_slot_datetime_value, :day) AS day
        FROM {field_data_field_slot_datetime} s
        INNER JOIN {node} n ON s.entity_id = n.nid AND s.revision_id = n.vid
        $event_join
        WHERE $event n.type = 'time_slot'
        GROUP BY DATE_FORMAT(s.field_slot_datetime_value, :day)
        ORDER BY s.field_slot_datetime_value ASC";
      $result = db_query($sql, array(':day' => '%W %M, %d %Y', ':event_id' => $event_id));
      foreach ($result as $record) {
        $days[$record->day] = $record->nid;
      }
    } else {
      return FALSE;
    }
  }
  return $days;
}

/**
 * Helper function for matching day to URL arguments
 */
function cod_events_day_url($day) {
  $day = str_replace(' ','-',$day);
  $day = str_replace(',','',$day);
  return strtolower($day);
}

/*
 * Make the event dashboard be an admin path
 */
function cod_events_admin_paths() {
  $paths = array(
    'node/*/dashboard' => TRUE,
  );
  return $paths;
}

/*
 * Add the default event select box for choosing a default event.
 */
function cod_events_form_cod_base_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['cod_events'] = array(
    '#type' => 'fieldset',
    '#title' => t('COD Events'),
    '#weight' => 5,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $options = array(t('No Default Event'));
  $eventQuery = new EntityFieldQuery();
  $event_list =  $eventQuery->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', 1)
    ->propertyOrderBy('title')
    ->execute();
  if (count($event_list['node']) == 1) {
    $default_event = array_pop(array_keys($event_list['node']));
    variable_set('cod_events_default_event', $default_event);
    $form['cod_events']['#description'] = "Node $default_event is the only event, and set to default";
  }
  else if (!empty($event_list['node'])) {
    $events = entity_load('node', array_keys($event_list['node']));
    foreach($events AS $event) {
      $options[$event->nid] = $event->title;
    }

    $form['cod_events']['cod_events_default_event'] = array(
      '#type' => 'select',
      '#title' => t('Default Event'),
      '#options' => $options,
      '#default_value' => variable_get('cod_events_default_event', 0),
    );
  }
  else {
    $form['cod_events']['#markup'] = "You currently have no events";
    variable_set('cod_events_default_event', 0);
  }

}
/**
* Implements hook_form_alter().
* - Add default event to all new node types, using the default event setting.
*/
function cod_events_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['og_group_ref'])) {
    if ($default_event = variable_get('cod_events_default_event', 0)) {
      if (empty($form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'])) {
        $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'] = $default_event;
        $form['og_group_ref']['#access'] = FALSE;
      }
    }
  }
}